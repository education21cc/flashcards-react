{"version":3,"sources":["data/Card.ts","instructionPages/swiggy/Instruction.tsx"],"names":["CardType","card","type","Normal","id","Instruction","containerRef","useRef","tooltipRef","useState","step","setStep","translations","useTranslationStore","instructions","useMemo","duration","elementSelector","text","getTextRaw","placement","useEffect","timeout","instruction","current","source","querySelector","content","innerHTML","createPopper","modifiers","name","options","offset","setTimeout","length","clearTimeout","style","display","cardOnBack","ref","onClick","className","isFlipped","flipDirection","flipSpeedFrontToBack","undefined","flipSpeedBackToFront","CardFace","side","ButtonBar","onLeftClick","onRightClick","onFlip","enableLeftAndRight","role","data-popper-arrow"],"mappings":"wIAAYA,E,yBAAAA,O,iBAAAA,I,mBAAAA,I,kBAAAA,M,iFCYNC,EAAO,CACXC,KAAMF,EAASG,OACfC,GAAI,QAgHSC,UA5GK,WAClB,IAAMC,EAAeC,iBAAuB,MACtCC,EAAaD,iBAAuB,MAC1C,EAAwBE,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAeC,cAEfC,EAAeC,mBAAQ,iBAAO,CAAC,CACnCC,SAAU,IACVC,gBAAiB,wBACjBC,KAAMN,EAAaO,WAAW,uBAC7B,CACDH,SAAU,IACVC,gBAAiB,qBACjBC,KAAMN,EAAaO,WAAW,uBAC7B,CACDH,SAAU,IACVC,gBAAiB,+BACjBC,KAAMN,EAAaO,WAAW,sBAC9BC,UAAW,UACV,CACDJ,SAAU,IACVC,gBAAiB,4BACjBC,KAAMN,EAAaO,WAAW,uBAC7B,CACDH,SAAU,IACVC,gBAAiB,2BACjBC,KAAMN,EAAaO,WAAW,0BAC3B,CAACP,IAENS,qBAAU,WAAO,IAAD,IACVC,EACEC,EAAcT,EAAaJ,GACjC,GAAKa,IAAef,EAAWgB,QAA/B,CAIA,IAAMC,EAAM,UAAGnB,EAAakB,eAAhB,aAAG,EAAsBE,cAAcH,EAAYN,iBAC/D,GAAKQ,GAAWjB,EAAWgB,QAA3B,CACA,IAAMG,EAAUnB,EAAWgB,QAAQE,cAAc,YACjD,GAAKC,EAiBL,OAhBAA,EAAQC,UAAYL,EAAYL,KAChCW,YAAaJ,EAAQjB,EAAWgB,QAAS,CACvCJ,UAAS,UAAEG,EAAYH,iBAAd,QAA2B,MACpCU,UAAW,CAAC,CACVC,KAAM,SACNC,QAAS,CACPC,OAAQ,CAAC,EAAG,QAKlBX,EAAUY,YAAW,WACfxB,EAAOI,EAAaqB,QACtBxB,EAAQD,EAAO,KAEhBa,EAAYP,UACR,WACLoB,aAAad,UAxBbd,EAAWgB,QAAQa,MAAMC,QAAU,SA0BpC,CAACxB,EAAcJ,IAElB,IAAM6B,EAAa7B,EAAO,EAO1B,OACE,sBAAK8B,IAAKlC,EAAcmC,QANN,WACd/B,EAAOI,EAAaqB,QACtBxB,EAAQD,EAAO,IAIjB,UACIA,EAAO,GACP,qCACE,qBAAKgC,UAAU,iBAAf,SACE,qBAAKA,UAAU,qBAAf,SACE,eAAC,IAAD,CACEC,WAAYJ,EACZK,cAAc,aACdC,0BAAsBC,EACtBC,0BAAsBD,EAJxB,UAME,cAACE,EAAA,EAAD,CAAUC,KAAK,QAAQhD,KAAMA,IAC7B,cAAC+C,EAAA,EAAD,CAAUC,KAAK,OAAOhD,KAAMA,WAIlC,cAACiD,EAAA,EAAD,CACEC,YAAa,aACbC,aAAc,aACdC,OAAQ,aACRC,mBAAoBf,OAIf,IAAT7B,GACA,8BACG,cAAC,IAAD,UACEE,EAAaO,WAAW,0BAI/B,sBAAKuB,UAAU,UAAUF,IAAKhC,EAAY+C,KAAK,UAA/C,UACE,qBAAKb,UAAU,YACf,qBAAKA,UAAU,QAAQc,qBAAA,Y","file":"static/js/0.d0c02da7.chunk.js","sourcesContent":["export enum CardType {\n  Intro,\n  Normal,\n  Outro\n}\n\nexport interface Card {\n  type: CardType;\n  id?: string;   // preferred way to set content of front. find content in translation file\n\n  image?: string;\n  frontText?: string;\n  text?: string;\n  subtext1?: string;\n  subtext2?: string;\n}\n","import CardFace from \"App/FlashCard/cards/CardNormal/CardFace\"\nimport { CardType } from \"data/Card\"\nimport { createPopper, Placement } from '@popperjs/core';\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport './styles/instruction.scss';\nimport { ButtonBarNormal } from \"App/ButtonBar\";\nimport ReactCardFlip from \"react-card-flip\";\nimport { useTranslationStore } from \"stores/translations\";\nimport ReactMarkdown from \"react-markdown\";\n\n\n\nconst card = {\n  type: CardType.Normal,\n  id: 'demo'\n}\n\n// Instructions componment for the swiggy project\nconst Instruction = () => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const tooltipRef = useRef<HTMLDivElement>(null)\n  const [step, setStep] = useState(0)\n  const translations = useTranslationStore();\n\n  const instructions = useMemo(() => ([{\n    duration: 10000,\n    elementSelector: '.flash-card-wrapper p',\n    text: translations.getTextRaw(\"instructions-text1\"),\n  }, {\n    duration: 10000,\n    elementSelector: '.button-bar button',\n    text: translations.getTextRaw(\"instructions-text2\")\n  }, {\n    duration: 10000,\n    elementSelector: '.flash-card-wrapper p button',\n    text: translations.getTextRaw(\"instructions-text3\"),\n    placement: 'bottom' as Placement\n  }, {\n    duration: 10000,\n    elementSelector: '.button-bar .button-right',\n    text: translations.getTextRaw(\"instructions-text4\")\n  }, {\n    duration: 10000,\n    elementSelector: '.button-bar .button-left',\n    text: translations.getTextRaw(\"instructions-text5\")\n  }]), [translations])\n\n  useEffect(() => {\n    let timeout:  NodeJS.Timeout\n    const instruction = instructions[step]\n    if (!instruction && tooltipRef.current) {\n      tooltipRef.current.style.display = 'none'\n      return\n    }\n    const source = containerRef.current?.querySelector(instruction.elementSelector)\n    if (!source || !tooltipRef.current) return\n    const content = tooltipRef.current.querySelector('.content')\n    if (!content) return\n    content.innerHTML = instruction.text\n    createPopper(source, tooltipRef.current, {\n      placement: instruction.placement ?? 'top',\n      modifiers: [{\n        name: 'offset',\n        options: {\n          offset: [0, 8],\n        },\n      }],\n    });\n\n    timeout = setTimeout(() => {\n      if (step < instructions.length) {\n        setStep(step + 1)\n      }\n    }, instruction.duration)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [instructions, step])\n\n  const cardOnBack = step > 1\n\n  const handleClick = () => {\n    if (step < instructions.length) {\n      setStep(step + 1)\n    }\n  }\n  return (\n    <div ref={containerRef} onClick={handleClick}>\n      { step < 5 && (\n        <>\n          <div className=\"card-container\">\n            <div className=\"flash-card-wrapper\">\n              <ReactCardFlip\n                isFlipped={!cardOnBack}\n                flipDirection=\"horizontal\"\n                flipSpeedFrontToBack={undefined}\n                flipSpeedBackToFront={undefined}\n              >\n                <CardFace side=\"front\" card={card} />\n                <CardFace side=\"back\" card={card} />\n              </ReactCardFlip>\n            </div>\n          </div>\n          <ButtonBarNormal\n            onLeftClick={() => undefined}\n            onRightClick={() => undefined}\n            onFlip={() => undefined}\n            enableLeftAndRight={cardOnBack}\n          />\n        </>\n      )}\n      { step === 5 && (\n        <div>\n           <ReactMarkdown>\n            {translations.getTextRaw(\"instructions-text6\")}\n           </ReactMarkdown>\n        </div>\n      )}\n      <div className=\"tooltip\" ref={tooltipRef} role=\"tooltip\">\n        <div className=\"content\"></div>\n        <div className=\"arrow\" data-popper-arrow></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Instruction\n"],"sourceRoot":""}